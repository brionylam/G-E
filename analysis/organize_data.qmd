---
title: "Organize Data Notebook"
---

```{r}
#| label: setup
#| include: false
library(here)
install.packages("MASS")
install.packages("factoextra")
install.packages("ltm")
install.packages("psych")


source(here("utils","check_packages.R"))
source(here("utils","functions.R"))

library(psych)
library(factoextra)
library(car)
library(mice)
library(VIM)
library(stats)
library(FactoMineR)
library(ggplot2)
library(ltm)
```

This quarto doc is used to organize the data.

```{r}
#| label: readdata


library(haven)
dts <- read_sav(here("data","data_raw",
                      "osfstorage-archive","CCAM SPSS Data 2008-2022.sav"))

ccam <- subset(dts, 
              select=c("wave","gender","age_category","generation","race","educ_category","income_category","party_x_ideo","weight_aggregate",
                       "fund_research","reg_CO2_pollutant","discuss_GW",
                       "worry","harm_personally","harm_plants_animals","harm_future_gen","harm_US","harm_dev_countries"))

#"reg_CO2_pollutant" not asked in wave4, "harm_plants_animals" not asked in wave13
ccam <- subset(ccam, wave != 4 & wave != 13)
```




```{r}
#| label: first evaluation of missing value

# Replace 'ccam' with the actual name of your dataset

# Specify the first set of variables of interest
first_set_variables <- c("worry","harm_personally", "harm_plants_animals", "harm_future_gen", "harm_US", "harm_dev_countries")

# Create a function to count "-1" and "0" for a specific variable
count_minus_one_and_zero_values <- function(variable_name) {
  cat("Variable:", variable_name, "\n")
  cat("Number of '-1':", sum(ccam[[variable_name]] == -1), "\n")
  cat("Number of '0':", sum(ccam[[variable_name]] == 0), "\n")
}

# Apply the function to each variable in the first set
lapply(first_set_variables, count_minus_one_and_zero_values)

# Specify the second set of variables of interest
second_set_variables <- c("fund_research", "reg_CO2_pollutant", "discuss_GW")

# Create a function to count "-1" for a specific variable
count_minus_one_values <- function(variable_name) {
  cat("Variable:", variable_name, "\n")
  cat("Number of '-1':", sum(ccam[[variable_name]] == -1), "\n")
}

# Apply the function to each variable in the second set
lapply(second_set_variables, count_minus_one_values)


```

```{r}
#| label: drop missing value_1

# in this dateset, "-1" menas reject to respond, drop all the "-1"; 


ccam <- subset(ccam, worry !=-1 & fund_research != -1 & reg_CO2_pollutant != -1 & discuss_GW != -1 & 
                 harm_personally != -1 & harm_plants_animals != -1 & harm_future_gen != -1 & harm_US != -1 & harm_dev_countries != -1)
```

```{r}
#| label: drop missing value_2


#"0" means don't know
ccam <- subset(ccam, harm_personally != 0 & harm_plants_animals != 0 & harm_future_gen != 0 & harm_US != 0 & harm_dev_countries != 0) 
```

```{r}
#| label:  impute original missing values

# in this dateset, "0" means don't know


# Specify the variables for imputation
variables_to_impute <- c("harm_personally", "harm_plants_animals", "harm_future_gen", "harm_US", "harm_dev_countries")

# Mean imputation for variables with missing values coded as "0"
for (variable in variables_to_impute) {
 if (is.numeric(ccam[[variable]])) {
    # Replace "0" with NA
    ccam[[variable]][ccam[[variable]] == 0] <- NA
    
    # Impute with mean for numerical variables
    ccam[[variable]][is.na(ccam[[variable]])] <- mean(ccam[[variable]], na.rm = TRUE)
  }
 }

# Check the imputed dataset
head(ccam)

```

```{r}
#| label: intercorrelation


# Select the variables of interest
variables_of_interest <-subset(ccam,
              select=c("fund_research","reg_CO2_pollutant","discuss_GW",
                       "worry","harm_personally","harm_plants_animals","harm_future_gen","harm_US","harm_dev_countries"))

# calculate the correlation matrix
correlation_matrix <- cor(variables_of_interest)

# Print the correlation matrix
print(correlation_matrix)

# Calculate Cronbach's Alpha
alpha_result <- cronbach.alpha(variables_of_interest)

# Print the result
cat("Cronbach's alpha for the 'data' dataset:\n")
cat("Items:", ncol(variables_of_interest), "Sample units:", nrow(variables_of_interest), "alpha:", alpha_result$alpha, "\n")

# Optionally, calculate Cronbach's Alpha with a 95% confidence interval
alpha_ci_result <- cronbach.alpha(variables_of_interest, CI = TRUE)
cat("Bootstrap 95% CI based on 1000 samples\n")
cat("2.5%:", alpha_ci_result$ci[1], "97.5%:", alpha_ci_result$ci[2], "\n")

```
```{r}
#| label: factor analysis

# Perform Factor Analysis
factor_analysis <- fa(variables_of_interest, nfactors = 3, rotate = "varimax")

# Print Factor Analysis Results
print(factor_analysis)

# Extract Eigenvalues
eigenvalues <- factor_analysis$values

# Plot Scree Plot
plot(1:length(eigenvalues), eigenvalues, type = "b", xlab = "Factor", ylab = "Eigenvalue",
     main = "Scree Plot")

# Add labels
text(1:length(eigenvalues), eigenvalues, labels = round(eigenvalues, 2), pos = 3)



```

```{r}
#| label: PCA2


#Load Libraries 
library(MASS) 
library(factoextra)
library(ggplot2)

#Structure of Data 
str(variables_of_interest)
summary(variables_of_interest)

# Run PCA
voi_pca <- prcomp(variables_of_interest, 
                     scale = TRUE)

#Summary of Analysis 
summary(voi_pca)


#Elements of PCA object 
names(voi_pca)

#Std Dev of Components 
voi_pca$sdev

#Eigenvectors 
voi_pca$rotation

#Std Dev and Mean of Variables 
voi_pca$center
voi_pca$scale

#Principal Component Scores
voi_pca$x


#Scree Plot of Variance 
fviz_eig(voi_pca, 
         addlabels = TRUE,
         ylim = c(0, 70))

#Biplot with Default Settings
fviz_pca_biplot(voi_pca)

#Biplot with Labeled Variables
fviz_pca_biplot(voi_pca,
                label="var")

# Access the loadings for the first few principal components (PC1 to PC9)
loadings <- voi_pca$rotation[, 1:9]

# Display the loadings
print(loadings)

```

```{r}
#| label: merge

# merge 9 variables into one variable called "att", which means the  pro-environment attitude. these 9 variables are all ordinal variables, and there are 5 ordinal level from 1 points to 4 point, the greater the number, the more the respondent pro-environment. 

#ccam$att <- rowSums(ccam[, c("fund_research","reg_CO2_pollutant","discuss_GW",
#                       "worry","harm_personally","harm_plants_animals","harm_future_gen","harm_US","harm_dev_countries")])


# set male(=1) as the reference group
ccam$gender <- as.factor(ccam$gender)
ccam$gender <- relevel(ccam$gender, ref = "1")
ccam$gender <- factor(ccam$gender, levels = c(1, 2), labels = c("male", "female"))


ccam$age_category <- factor(case_when(
  ccam$age_category==1 ~ "18-34",
  ccam$age_category==2 ~ "35-54",
  ccam$age_category==3 ~ "55+"),
  levels=c("18-34","35-54","55+"))
summary(ccam$age_category)

ccam$educ_category <- factor(case_when(
  ccam$educ_category==1 ~ "L",
  ccam$educ_category==2 ~ "H",
  ccam$educ_category==3 ~ "C",
  ccam$educ_category==4 ~ "B"),
  levels=c("L","H","C","B"))

summary(ccam$educ_category)

ccam$income_category <- factor(case_when(
  ccam$income_category==1 ~ "Less than 50K",
  ccam$income_category==2 ~ "50K-100K",
  ccam$income_category==3 ~ "Greater than 100K"),
  levels=c("Less than 50K","50K-100K","Greater than 100K"))

ccam$race <- factor(case_when(
  ccam$race==1 ~ "W",
  ccam$race==2 ~ "B",
  ccam$race==3 ~ "O",
  ccam$race==4 ~ "H"),
  levels=c("W","B","O","H"))
summary(ccam$race)

ccam$party_x_ideo <- factor(case_when(
  ccam$party_x_ideo==-2 ~ "No Party",
  ccam$party_x_ideo==-1 ~ "Refused",
  ccam$party_x_ideo==1 ~ "Liberal Democrat",
  ccam$party_x_ideo==2 ~ "Moderate Democrat",
  ccam$party_x_ideo==3 ~ "Independent",
  ccam$party_x_ideo==4 ~ "Liberal Republican",
  ccam$party_x_ideo==5 ~ "Conservative Republican"),
  levels=c("No Party","Refused","Liberal Democrat","Moderate Democrat","Independent","Liberal Republican","Conservative Republican"))
summary(ccam$party_x_ideo)

ccam$age <- ccam$age_category
ccam$edu <- ccam$educ_category
ccam$income <- ccam$income_category 
ccam$ideo <-ccam$party_x_ideo
```


```{r}
#| label: multicollinearity

# Fit your regression model
#model <- lm(att ~ gender + harm_future_gen + harm_dev_countries, data = ccam)

# Calculate VIF
#vif_result <- vif(model)

# Print VIF results
#print(vif_result)
```




```{r}
#| label: save-data

save(ccam, file=here("data","data_constructed","ccam_data.RData"))
```
